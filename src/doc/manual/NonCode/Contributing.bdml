<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../bdml/BdmlHtml.xsl"?>

<!--
  - Balau core C++ library
  - Copyright (C) 2008 Bora Software (contact@borasoftware.com)
  -
  - Licensed under the Apache License, Version 2.0 (the "License");
  - you may not use this file except in compliance with the License.
  - You may obtain a copy of the License at
  -
  -     http://www.apache.org/licenses/LICENSE-2.0
  -
  - Unless required by applicable law or agreed to in writing, software
  - distributed under the License is distributed on an "AS IS" BASIS,
  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  - See the License for the specific language governing permissions and
  - limitations under the License.
  -
  -->

<document xmlns="http://boradoc.org/1.0">
	<metadata>
		<relative-root url=".." />
		<header url="../common/header.bdml" target="html" />
		<footer url="../common/footer.bdml" target="html" />
		<stylesheet url="../resources/css/balau.css" target="html" />
		<link rel="icon" type="image/png" href="../resources/images/BoraLogoC300-OS.png" />
		<copyright>Copyright (C) 2008 Bora Software (contact@borasoftware.com)</copyright>

		<title text="Balau core C++ library - contributing" />
		<toc start="1" />

		<script src="../bdml/js/Comments.js" type="text/javascript" />
		<script src="../bdml/js/SyntaxHighlighter.js" type="text/javascript" />
		<script src="../bdml/js/CppHighlighterDefinition.js" type="text/javascript" />
		<script src="../bdml/js/VerbatimHighlighterDefinition.js" type="text/javascript" />
		<script src="../bdml/js/MenuHider.js" type="text/javascript" />
	</metadata>

	<chapter title="Contributing">
		<h1>Overview</h1>

		<para>Contributions to the Balau library are welcome. The easiest way to contribute is to create a fork of the library's repository and submit pull requests for new or enhanced features.</para>

		<para>The Balau library has been conceived for two distinct aims:</para>

		<bullets>
			<entry>to provide a foundation for the development of Unicode aware C++ software applications that have a dependency injection based architecture, have complex logging requirements, and that will be developed with a test driven development methodology;</entry>

			<entry>to provide a simple and intuitive API for core C++ components and utilities.</entry>
		</bullets>

		<para>Contributions to the injector, logging framework, and test runner are likely to be incremental improvements and bug fixes. Contributions of new components and improvements to other existing components and utilities are open to our imagination and creativity.</para>

		<h1>Planned features</h1>

		<para>The general aim of the library's development is reactive rather than proactive. If a useful feature for enterprise quality C++ application development is missing, convoluted, or lacking in features in the C++ standard library, then the feature is a good candidate for development and inclusion in Balau.</para>

		<para>If an existing feature in the standard library exists and is designed as low level, fine grained, or does not have a straight forward API, then it would be useful to develop a corresponding Balau feature with a simple and intuitive API, as a high level facade of the standard library feature.</para>

		<para>Consequently, there is no complex plan of planned features to be added to the library. The current list of planned features can be seen on the <ref url="NonCode/PlannedFeatures">planned features</ref> page.</para>

		<h1>License</h1>

		<para>Balau is licensed under the <emph>Apache License, Version 2.0</emph>. All contributions will need to be licensed under the same license or under a license that allows relicensing under the Apache License, Version 2.0.</para>

		<h1>Repository</h1>

		<para>The main repository is hosted at <ref type="raw" new="true" url="https://github.com/borasoftware/balau" />.</para>

		<h1>Guidelines</h1>

		<para>The following guidelines may help with contributions. In addition to avoiding defects, the aim is to maintain an easy to understand code base in order to facilitate with rapid application development.</para>

		<h2>General</h2>

		<bullets>
			<entry>Classes of appreciable complexity are normally contained in their own header plus optional body file. Smaller classes should share a header with other similar classes / the complex class that uses them.</entry>

			<entry>Implementation specific classes are placed in files inside an <emph>Impl</emph> sub-folder next to the main class(es), and namespaced within an inner <emph>Impl</emph> sub-namespace. The injector and logging system are examples of this arrangement.</entry>

			<entry>Logging in Balau library components and functions should be restricted to code in body files only. This allows an incomplete declaration to be made for the <emph>Logger</emph> class in header files, thereby simplifying the include order in application code.</entry>

			<entry>Before creating a pull request, the code should be formatted to the Balau code style guidelines provided below.</entry>
		</bullets>

		<h2>Testing</h2>

		<bullets>
			<entry>All anticipated uses cases of the new or enhanced feature should be tested by adding or revising the feature's test cases in the <emph>src/test</emph> folder.</entry>

			<entry>When a modification is made or new code is introduced and the tests are written, the test application should be run with <emph>Valgrind</emph> memcheck and helgrind tools, in order to verify that there are no memory and threading issues. If there are memory and/or threading issues, these should be debugged and resolved before raising a pull request.</entry>

			<entry>After completing the modification or new feature, the Balau test suite should be verified to pass in <emph>release</emph> mode in addition to <emph>debug</emph> mode.</entry>
		</bullets>

		<h2>Strings</h2>

		<bullets>
			<entry>All features that use or manipulate <emph>std::string</emph> objects should be designed to function correctly with UTF-8 text, unless there is a valid reason not to do so (i.e. the data in the <emph>std::string</emph> is not UTF-8 text and/or is clearly processing pure bytes of information). Such exceptions should be documented as being so, otherwise it will be assumed that the bytes within a <emph>std::string</emph> object are UTF-8.</entry>

			<entry>The <emph>wchar_t</emph> character type and associated string and stream types must not be used anywhere in the library.</entry>

			<entry>UTF-8 character processing is currently implemented by ICU code wrapper functions found within the <emph>Balau::Character</emph> namespace.</entry>

			<entry>When developing a utility function or component that manipulates UTF-8 strings, an equivalent UTF-32 version should normally be created alongside the UTF-8 version.</entry>

			<entry>When creating a function that accepts one or more const strings, string views should be used instead of std strings.</entry>

			<entry>Beware of the <emph>std::string_view::data()</emph> method. Do not use this method unless you are 100% sure null pointer character array termination is not required in the program logic that uses the data.</entry>

			<entry>Beware of returning <emph>std::string_view</emph> from methods. Returning <emph>std::string_view</emph> from a method should only be done when the lifetime of the referenced string data is guaranteed to outlive the string view being returnd.</entry>
		</bullets>

		<h2>Const correctness</h2>

		<bullets>
			<entry>All global variables, member variables, and local variables should be made <emph>const</emph> unless there is a reason to make them non-const.</entry>

			<entry>All member functions should be made <emph>const</emph> unless there is a reason to make them non-const.</entry>
		</bullets>

		<h2>Concurrency</h2>

		<bullets>
			<entry>When developing code that relies on multi-threaded execution and inter-thread data sharing, the developed code should use standard C++ 11 memory ordering features, principally the atomic operations library. Mindful use of <emph>std::memory_order</emph> may improve performance on some platforms, but is usually not necessary, especially for the principal <emph>x86-64</emph> target platform.</entry>
		</bullets>

		<h2>Memory management</h2>

		<bullets>
			<entry>Manual use of memory allocation via the <emph>delete</emph> operator should be avoided, except in exceptional circumstances where the code itself is acting as a pointer container that provides object lifetime management. Otherwise, the C++11 standard library pointer containers should be used for heap based objects.</entry>

			<entry>Use of C++11 move semantics should be preferred to copying. Copying should be limited to cases where the caller must retain ownership of the passed argument. When copying is used, a pass by value and move approach should be used in preference to pass by reference and copy.</entry>
		</bullets>

		<h2>Templates</h2>

		<bullets>
			<entry>Unnecessarily complex templated code should normally be avoided. Complex templated code should be used when the resulting solution is more elegant and/or the resulting public API is more simple than it would be if an alternative approach were taken AND quick start documentation for common use cases is provided. Our aim is to provide components and utilities for rapid enterprise quality application development. Development teams working on enterprise software applications do not normally have enough time for in-depth studies of the inner workings of a complexly templated component in order to fulfil a simple use case.</entry>

			<entry>Variadic functions and methods should always be implemented via C++11 parameter packs. Fold expressions may assist in the simplification of otherwise complex variadic tasks.</entry>
		</bullets>

		<h2>Macros</h2>

		<bullets>
			<entry>The use of macros should be avoided, unless there is no other way of implementing a feature (examples include the file/line logging macros and the injector class macros).</entry>

			<entry>The use of conditional compilation macros should be avoided, unless there is no other way of implementing a feature. If some complex conditional compilation is required for resolving differences across platforms, put the code in platform specific headers and include them appropriately in the main source code file. The exception to this is the use of the <emph>BALAU_DEBUG</emph> macro, which is used to enable code in debug builds.</entry>
		</bullets>

		<h2>Documentation</h2>

		<bullets>
			<entry>Public classes, functions, and methods should be documented with triple forward slash <emph>///</emph> documentation entries. Public items that are not documented will not be added to the API documentation. Each entry should have a single line description, a line break, then a more in-depth description. Parameters, exceptions, and return variables that are non-obvious should be documented with @tparam, @param, @throws, and @return entries. As Balau is a software library, users rely on the API documentation to use it, and consequently the API documentation is as essential as the code itself.</entry>

			<entry>Permanent block style /* */ code comments should never be used, as they complicate temporary block commenting/uncommenting.</entry>

			<entry>Protected and private classes, functions, and methods of any complexity should be documented with a brief, usually single line double forward slash <emph>//</emph> comment that indicates the goal of the entry. Triple forward slash <emph>///</emph> documentation entries should not be used unless the information for the item needs to appear in the API documentation.</entry>

			<entry>Code comments are generally unnecessary, unless a code fragment is unusually difficult to understand. In this case, a line or two of comments clarifying the goal of the fragment is useful.</entry>

			<entry>Author or version information should not be included in source code files. Detailed author information is available by examining the source code repository (git-blame).</entry>

			<entry>When a new class or feature is developed or an existing class or feature is enhanced, a corresponding BDML documentation page should be created or revised with the new or revised usage. The BDML documentation pages are found in the <emph>src/doc/manual</emph> folder. As the documentation is XML based, it can be written during development of the code and committed in the same change-sets as the code. Writing BDML documentation can be performed during compilation pauses. BDML documentation should follow the standard structure of <emph>Overview</emph>, <emph>Quick start</emph> (starting with the header(s) to include), optional detailed documentation sections, and optional <emph>Design</emph> section.</entry>
		</bullets>

		<h1>Code style</h1>

		<para>The aim of the code style used in the Balau library is maximum readability. The following sub-sections discuss aspects of the code style.</para>

		<h2>Indentation</h2>

		<para>Balau code style uses <emph>smart tab</emph> indenting. This allows developers to choose the tab size they desire in their source code editor, whilst maintaining correct alignment of vertically aligned items. Indentation size is thus not specified in this code style.</para>

		<h2>Files</h2>

		<para>Lines should be limited to 120 characters, when viewed with a tab size of 4 characters. Comment lines should normally be limited to approximately 80 characters.</para>

		<para>Newlines in files must be <emph>LF</emph>, not <emph>CRLF</emph> or <emph>CR</emph>. Files should end with a newline. Whitespace should be removed at the ends of lines (configure the IDE to do it for you on saving).</para>

		<para>Files should be named <emph>"([A-Z][a-z]*)+.hpp"</emph> for header files and <emph>"([A-Z][a-z]*)+.cpp"</emph> for body files.</para>

		<para>Files should be grouped into a hierarchy of folders, the names of which are normally the same as the local namespace of the files contained within. The folder structure should normally follow the namespace structure.</para>

		<para>Headers should use include barriers, the names of which exactly follow the names in the folder hierarchy in which the file is situated. The <emph>#pragma once</emph> definition should not be used. This will be revised when C++20 modules are standardized.</para>

		<para>Includes in header files should be avoided when possible (use incomplete declarations). Otherwise, the full include path of non test header files should be used between &lt; and &gt; tokens.</para>

		<code lang="C++">
			// Example include in header file.
			#include &lt;Balau/Network/Http/Server/HttpWebApp.hpp&gt;
		</code>

		<h2>Identifiers</h2>

		<para>Identifiers should be styled according to the following rules.</para>

		<bullets>
			<entry>Namespace, class, enum, and enum entry names should be upper camel case.</entry>

			<entry>Function, method, field names, and local variables should be lower camel case.</entry>

			<entry>Public macros (macros to be used in end application code) should be uppercase camel case.</entry>

			<entry>Private macros (macros to be used in other Balau macros) should be uppercase camel case and start with an underscore.</entry>

			<entry>Underscores should not be used apart from starting private macro identifiers and as a suffix for constructor parameters that set similarly named class fields in constructor initialisation lists.</entry>

			<entry>Identifiers other than local variables should be as short as possible whilst providing adequate information on their goals and avoiding abbreviations. It is fine to use long identifiers if there is no other way of providing sufficient information, but this should be the case for a minority of identifiers.</entry>

			<entry>Local variables, especially those used for temporary counters and the like, should be short, often a single letter.</entry>
		</bullets>

		<para>Metadata naming conventions (type, kind) must not be used (use an IDE that indicates identifier semantics for you). Semantic apps identifiers should mostly be avoided, apart for template parameter identifiers.</para>

		<h2>Spacing</h2>

		<para>Spacing of source code tokens aims to maximise visual grouping of related tokens, whilst maintaining a compact representation. The spacing rules are specified as a subtractive list. All tokens should be surrounded by a space, with the exception of the following, which do not have space before and/or after them:</para>

		<bullets>
			<entry>after '(', '[', and before ']', ')';</entry>

			<entry>after '&lt;' and before '>' when these characters are template header tokens;</entry>

			<entry>before '(' and after ')' when these characters are function call parameter list parentheses;</entry>

			<entry>after '::';</entry>

			<entry>before '::', unless the character pair references the global scope;</entry>

			<entry>between <emph>public</emph>, <emph>protected</emph>, and <emph>private</emph> tokens and their associated ':';</entry>

			<entry>between 'case' and its associated ':' in a switch statement;</entry>

			<entry>before ',' and ';'</entry>

			<entry>after '*' and '&amp;' when these characters are de-reference and address-of tokens;</entry>

			<entry>after '+' and '-' when these characters are unary operators.</entry>
		</bullets>

		<h2>Braces</h2>

		<para>Opening '{' braces are placed on the same line as the associated statement.</para>

		<para>Single line code blocks should not be used.</para>

		<para>Single line code blocks must use braces.</para>

		<code lang="C++">
			// Single line code block in if statement.
			if (i &lt; 0) {
				foo();
			}
		</code>

		<para>Case blocks within switch statements should also use braces.</para>

		<code lang="C++">
			// Switch statement case blocks.
			switch (type) {
				case Type::Simple: {
					foo();
					break;
				}

				case Type::Composite: {
					foo2();
					break;
				}

				default: {
					throwError();
					break;
				}
			}
		</code>

		<h2>Horizontal/vertical</h2>

		<para>This principal maximises the readability of parameter lists, enum entries, argument lists, and other delimited lists found in the source code.</para>

		<para>The general idea is that it is easiest to read a delimited list when it is presented either in a single line or as a vertically aligned list. The choice of the two approaches is dictated by the length of the line when the delimited list is presented on a single line. If a single line fits within the 120 character limit, a single line is chosen. Otherwise, a vertically aligned list is chosen.</para>

		<para>The following extracts illustrate this approach on method parameter lists.</para>

		<code lang="C++">
			// From HttpWebApp class.

			public: virtual void handleGetRequest(HttpSession &amp; session, const Request &amp; request) = 0;
		</code>

		<para>In this example, the method's header fits on a single line without overrunning the 120 character limit.</para>

		<code lang="C++">
			// From HttpServer class.

			public: HttpServer(std::shared_ptr&lt;Injector> injector,
			                   const std::string &amp; serverIdentification,
			                   const TCP::endpoint &amp; endpoint,
			                   std::string threadNamePrefix_,
			                   size_t workerCount_,
			                   std::shared_ptr&lt;HttpWebApp> httpHandler,
			                   std::shared_ptr&lt;WsWebApp> wsHandler,
			                   std::shared_ptr&lt;MimeTypes> mimeTypes = MimeTypes::defaultMimeTypes);
		</code>

		<para>In this example, the method's header would overrun the 120 character limit if it were presented on a single line, so the parameter list is arranged vertically aligned.</para>

		<h3>Delimiters</h3>

		<para>With the exception of commas in function and method parameter lists (as illustrated in the previous code example), the delimiters in a vertically aligned, delimiter separated list are each considered to belong to the following item in the list.</para>

		<para>For example, the commas in the vertically delimited superclass call in the following code extract lead the arguments.</para>

		<code lang="C++">
			protected: MultiProcessTestRunnerExecutor(CompositeWriter &amp; writer_,
			                                          bool useNamespaces_,
			                                          GroupedTestCaseMap &amp; testCases,
			                                          unsigned int concurrencyLevel_)
				: TestRunnerExecutor(
					  std::unique_ptr&lt;TestResultQueue>(new MultiProcessTestResultQueue)
					, writer_
					, useNamespaces_
					, testCases
					, true
				)
				, concurrencyLevel(concurrencyLevel_)
				, sharedMemoryNamePrefix(createSharedMemoryNamePrefix()) {}
		</code>

		<para>This code extract also illustrates comma delimited field initialisation.</para>

		<h3>Closing brackets</h3>

		<para>When a vertically aligned list is used within opening and closing brackets/parentheses, the closing bracket/parenthesis is placed on a newline. An example of this is shown in the previous code extract. The following is an example with two levels.</para>

		<code lang="C++">
			tests.emplace_back(
				FlattenedTestCase(
					  testIndex
					, executionModels
					, preText
					, ""
					, testCase.name
					, testCase.group
					, std::move(testCase.method)
				)
			);
		</code>

		<h2>Visibility prefixes</h2>

		<para>The visibility prefixes are the <emph>public</emph>, <emph>protected</emph>, and <emph>private</emph> tokens used in class declarations.</para>

		<para>In Balau sources, class declarations use explicit visibility prefixes on all declaration items (fields, methods, inner class/enum declarations). This provides physically colocated visibility information for all items, avoiding the need to search upwards in the source code for the visibility of a class item and declaring that the item is part of a class declaration.</para>
	</chapter>
</document>
