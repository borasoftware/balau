<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../bdml/BdmlHtml.xsl"?>

<!--
  - Balau core C++ library
  - Copyright (C) 2008 Bora Software (contact@borasoftware.com)
  -
  - Licensed under the Apache License, Version 2.0 (the "License");
  - you may not use this file except in compliance with the License.
  - You may obtain a copy of the License at
  -
  -     http://www.apache.org/licenses/LICENSE-2.0
  -
  - Unless required by applicable law or agreed to in writing, software
  - distributed under the License is distributed on an "AS IS" BASIS,
  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  - See the License for the specific language governing permissions and
  - limitations under the License.
  -
  -->

<document xmlns="http://boradoc.org/1.0">
	<metadata>
		<relative-root url=".." />
		<header url="../common/header.bdml" target="html" />
		<footer url="../common/footer.bdml" target="html" />
		<stylesheet url="../resources/css/balau.css" target="html" />
		<link rel="icon" type="image/png" href="../resources/images/BoraLogoC300-OS.png" />
		<copyright>Copyright (C) 2008 Bora Software (contact@borasoftware.com)</copyright>

		<title text="Balau core C++ library - building Balau" />
		<toc start="1" />

		<script src="../bdml/js/Comments.js" type="text/javascript" />
		<script src="../bdml/js/SyntaxHighlighter.js" type="text/javascript" />
		<script src="../bdml/js/CppHighlighterDefinition.js" type="text/javascript" />
		<script src="../bdml/js/VerbatimHighlighterDefinition.js" type="text/javascript" />
		<script src="../bdml/js/MenuHider.js" type="text/javascript" />
	</metadata>

	<chapter title="Building Balau">
		<para>This chapter discusses the preparatory steps, configuring, and building Balau.</para>

		<h1>Defaults</h1>

		<h2>CMAKE_PREFIX_PATH</h2>

		<para>If the <emph>CMAKE_PREFIX_PATH</emph> is not set, the Balau CMakeLists.txt file defaults it to the <emph>${HOME}/usr</emph> folder. This setup allows the optional libzip dependency to be installed in <emph>${HOME}/usr</emph>, to be picked up during CMake configuration automatically.</para>

		<para>If the dependencies are located elsewhere, the <emph>CMAKE_PREFIX_PATH</emph> should be set, as discussed in the <emph>CMake variables</emph> section below.</para>

		<h2>CMAKE_INSTALL_PREFIX</h2>

		<para>If the <emph>CMAKE_INSTALL_PREFIX</emph> is not set, the Balau CMakeLists.txt file defaults it to the <emph>${HOME}/usr</emph> folder. If the library should be installed elsewhere (such as to <emph>/usr</emph>), the <emph>CMAKE_INSTALL_PREFIX</emph> should be set, as discussed in the <emph>CMake variables</emph> section below.</para>

		<h1>Options</h1>

		<para>Balau contains a number of optional components that can be enabled/disabled during CMake configuration.</para>

		<para>The currently available options are detailed in the table below.</para>

		<table class="bdml-table2020c60">
			<head>
				<cell>Option</cell>
				<cell>Default</cell>
				<cell>Description</cell>
			</head>

			<body>
				<row>
					<cell>BALAU_ENABLE_ZLIB</cell>
					<cell>ON</cell>
					<cell>Enable ZLib library wrappers for gzip compression support.</cell>
				</row>

				<row>
					<cell>BALAU_ENABLE_ZIP</cell>
					<cell>ON</cell>
					<cell>Enable LibZip library wrappers (Zipper and Unzipper).</cell>
				</row>

				<row>
					<cell>BALAU_ENABLE_CURL</cell>
					<cell>ON</cell>
					<cell>Enable use of Curl library (email sending web app).</cell>
				</row>
			</body>
		</table>

		<para>By default, ZLib and LibZip compression components are enabled, and the Curl components are not. Enabled components will require the corresponding library development files to be present during the build, as described in the dependencies section below.</para>

		<h1>Dependencies</h1>

		<para>In addition to the C++ standard library, Balau relies on three optional utility libraries.</para>

		<para>These utility libraries are <emph>zlib</emph>, <emph>libzip</emph> and <emph>curl</emph>. These libraries should be installed via your distribution's standard packaging system.</para>

		<para>The only other dependencies used are standard dependencies on each supported platform.</para>

		<h2>Utility libraries</h2>

		<h3>Debian/Ubuntu</h3>

		<para>The following command is for Ubuntu 18.04 and OpenSSL.</para>

		<code>
			sudo apt install zlib1g-dev libzip-dev libcurl4-openssl-dev libssl-dev
		</code>

		<h3>RPM based distributions</h3>

		<h4>Fedora 28 / 29</h4>

		<code>
			sudo yum install zlib-devel openssl-devel libcurl-devel libzip-devel
		</code>

		<h4>RHEL CentOS</h4>

		<para>Balau can be built on RHEL5 / CentOS v5 of later via the developer toolset 6 or later.</para>

		<code>
			sudo yum install zlib-devel openssl-devel libcurl-devel
		</code>

		<para>The supplied version of libzip on these distributions is <emph>0.10.1</emph>. A recent version of libzip must thus be compiled and installed. The following commands will download, build, and install libzip version <emph>1.5.1</emph> into the <emph>${HOME}/usr</emph> directory (this directory will be referenced later via <emph>CMAKE_PREFIX_PATH</emph>).</para>

		<code>
			mkdir Libs
			cd Libs
			wget https://libzip.org/download/libzip-1.5.1.tar.gz
			tar zxvf libzip-1.5.1.tar.gz
			cd libzip-1.5.1
			mkdir build
			cd build
			cmake -DCMAKE_INSTALL_PREFIX=${HOME}/usr ..
			make
			make install
		</code>

		<para>To install the developer toolset on CentOS, the <emph>SCL</emph> command can be used. DTS7 may be installed via the following command:</para>

		<code>
			scl enable devtoolset-7 bash
		</code>

		<para>RHEL / CentOS also ship with old versions of CMake (<emph>2.8</emph>). As Balau requires at least CMake version <emph>3.10.2</emph>, a suitable build of CMake must be available. Please refer to the <ref type="raw" new="true" url="https://cmake.org/">CMake</ref> website for more information.</para>

		<h1>CMake variables</h1>

		<para>Balau relies on two CMake variables in order to find its dependencies and to specify where to install itself. These two variables may optionally be set before building the library.</para>

		<para>If you use the default Balau installation location (<emph>${HOME}/usr</emph>), both these variables will default to this. Otherwise, these variables must be set before building the library.</para>

		<para>The exact method for specifying these CMake variables depends on whether you use the command line or an IDE. Only the command line technique is covered in the build steps here. For IDEs that support CMake, these are typically set from within the settings/preferences of the IDE. Refer to the specific IDE's documentation for information.</para>

		<h2>CMAKE_PREFIX_PATH</h2>

		<para>This CMake variable specifies a list of directories where dependencies may be found. More information is available on the CMake documentation <ref type="raw" new="true" url="https://cmake.org/cmake/help/v3.6/variable/CMAKE_PREFIX_PATH.html">here</ref>.</para>

		<h2>CMAKE_INSTALL_PREFIX</h2>

		<para>This CMake variable specifies the installation prefix into which the Balau library will be installed. More information is available on the CMake documentation <ref type="raw" new="true" url="https://cmake.org/cmake/help/v3.6/variable/CMAKE_INSTALL_PREFIX.html">here</ref>.</para>

		<h1>Environment variables</h1>

		<para>The Balau test application uses a number of environment variables in the unit tests, imported via the CMakeLists.txt file. These environment variables are optional. If they are not defined, the unit tests that require them will be disabled.</para>

		<para>Refer to the CMakeLists.txt file for details on each environment variable if you wish to run the associated unit tests.</para>

		<h1>Building Balau</h1>

		<para>Building can be achieved either via the command line or from within an IDE that supports the CMake build system. Building and installing via the command line is covered in this document.</para>

		<h2>Linux</h2>

		<para>Open a command prompt and prepare the build with the following commands.</para>

		<code>
			cd path/to/projects
			git clone https://github.com/borasoftware/balau.git
			cd path/to/balau/code
			mkdir build-debug
			cd build-debug
		</code>

		<para>If you are using the default prefix path and install prefix, execute the following commands.</para>

		<code>
			cmake -DCMAKE_BUILD_TYPE=Debug ..
			make -j 4
			make install
		</code>

		<para>If you are using a non-default prefix path and/or a non-default install prefix, run the following commands, replacing <emph>${DEPS}</emph> with the installation locations of the dependencies you configured in the previous steps, and <emph>${BALAU_PREFIX}</emph> with the installation prefix where you wish to install the Balau library.</para>

		<code>
			cmake -DCMAKE_PREFIX_PATH=${DEPS}            \
			      -DCMAKE_INSTALL_PREFIX=${BALAU_PREFIX} \
			      -DCMAKE_BUILD_TYPE=Debug               \
			      ..

			make -j 4
			make install
		</code>

		<para>The above set of commands:</para>

		<bullets>
			<entry>creates an out of source build directory <emph>build-debug</emph>;</entry>
			<entry>configures CMake;</entry>
			<entry>builds the library;</entry>
			<entry>installs the library to ${BALAU_PREFIX}.</entry>
		</bullets>

		<para>If you wish to have a release build, set <emph>CMAKE_BUILD_TYPE</emph> to <emph>Release</emph> instead.</para>

		<h2>Windows</h2>

		<para>This section will be filled in when the Windows port has been completed.</para>

		<h1>Linking</h1>

		<para>In order to link to the Balau library, your <emph>CMakeLists.txt</emph> file needs to be modified with the Balau library.</para>

		<code lang="C++">
			find_package(Balau 2020.11.1 REQUIRED)
			message(STATUS "Balau includes: ${Balau_INCLUDE_DIRS}")
			message(STATUS "Balau library:  ${Balau_LIBRARY}")
			include_directories(BEFORE ${Balau_INCLUDE_DIRS})
			set(ALL_LIBS ${ALL_LIBS} ${Balau_LIBRARY})
		</code>
	</chapter>
</document>
