<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../bdml/BdmlHtml.xsl"?>

<!--
  - Balau core C++ library
  -
  - Copyright (C) 2017 Bora Software (contact@borasoftware.com)
  -
  - Licensed under the Boost Software License - Version 1.0 - August 17th, 2003.
  - See the LICENSE file for the full license text.
  -
  -->

<document xmlns="http://boradoc.org/1.0">
	<metadata>
		<relative-root url=".." />
		<header url="../common/header.bdml" target="html" />
		<footer url="../common/footer.bdml" target="html" />
		<stylesheet url="../resources/css/balau.css" target="html" />
		<link rel="icon" type="image/png" href="../resources/images/BoraLogoC300-OS.png" />
		<copyright>Copyright (C) 2017 Bora Software (contact@borasoftware.com)</copyright>

		<title text="Balau core C++ library - HTTP server" />
		<toc start="1" />

		<script src="../bdml/js/Comments.js" type="text/javascript" />
		<script src="../bdml/js/SyntaxHighlighter.js" type="text/javascript" />
		<script src="../bdml/js/CppHighlighterDefinition.js" type="text/javascript" />
		<script src="../bdml/js/VerbatimHighlighterDefinition.js" type="text/javascript" />
		<script src="../bdml/js/PropertiesHighlighterDefinition.js" type="text/javascript" />
		<script src="../bdml/js/MenuHider.js" type="text/javascript" />
	</metadata>

	<chapter title="HTTP server">
		<h1>Overview</h1>

		<para>An HTTP and WebSocket server that uses the Boost Asio and Beast libraries.</para>

		<para>A Balau HTTP server instance contains two trees of web applications, one for HTTP and another for WebSockets. These trees allow the server to handle HTTP requests differently, according to the HTTP request paths. WebSocket clients are also connected to different WebSocket applications, based on the HTTP request path active during the WebSocket upgrade.</para>

		<para>Complex routing and handling of HTTP requests by a single HTTP server may be created via the creation of a sophisticated HTTP web application tree. Similarly, the specification of the WebSockets application tree allows multiple WebSockets applications to be provided by the same HTTP server.</para>

		<para>There are two ways to use the HTTP server:</para>

		<bullets>
			<entry>specify server configuration parameters and web application trees directly via one of the HTTP server's constructors;</entry>

			<entry>specify HTTP server and web application tree configuration via <ref url="Application/Environment">environment configuration</ref>.</entry>
		</bullets>

		<para>The first type of usage is a more traditional approach to application development, where the web application framework is fixed at code creation.</para>

		<para>The second type of usage allows different web application configurations to be specified for different environments whilst using the same pre-compiled application. The resulting environment configurations provide the configurable parameters of the main HTTP server and the web applications, modifiable independently of application compilation.</para>

		<h1>Quick start</h1>

		<para class="cpp-define-statement"><emph><strong>#include &lt;Balau/Network/Http/Server/HttpServer.hpp></strong></emph></para>

		<h2>Hardwired</h2>

		<para>There are two HTTP server constructors available for direct usage.</para>

		<para>The first constructor accepts global server configuration and both predefined HTTP and WebSocket handlers. By specifying routing web application handlers, this constructor also allows full HTTP and WebSockets application trees to be specified. If no WebSockets handler or application tree is required, a null handler may be specified.</para>

		<para>The second constructor accepts global server configuration and a document root. This constructor is useful in order to create a simple file serving HTTP server.</para>

		<para>Both these constructors may be used within an injector provider if required, in order to integrate them into the application's bindings tree.</para>

		<para>Please refer to the HTTP server source code or the Balau API documentation to see the exact signatures of the two constructors.</para>

		<h2>Injected</h2>

		<para>The injectable constructor of the HTTP server takes an <emph>EnvironmentProperties</emph> instance. When supplied from the injector, this is bound to the root <emph>EnvironmentProperties</emph> binding with name "<emph>http.server</emph>".</para>

		<code lang="C++">
			HttpServer(std::shared_ptr&lt;System::Clock> clock,
			           std::shared_ptr&lt;EnvironmentProperties> configuration,
			           bool registerSignalHandler = true);
		</code>

		<para>The clock instance should be provided by another binding in the injector's application configuration. The <emph>http.server.register.signal.handler</emph> boolean binding is defaulted to <emph>true</emph> via the Balau environment configuration specifications. If you intend to set up your own signal handlers which will manage the HTTP server's shutdown, your environment configuration should have a <emph>http.server.register.signal.handler</emph> root property set to <emph>false</emph>.</para>

		<para>The above constructor will be called by the injector when a suitable binding is added to the application configuration.</para>

		<code lang="C++">
			// Example application configuration for the HTTP server.
			class AppConfig : public Balau::ApplicationConfiguration {
				public: void configure() const override {
					bind&lt;Balau::System::Clock>().toSingleton&lt;Balau::System::SystemClock>();
					bind&lt;Balau::Network::Http::HttpServer>().toSingleton();
				}
			};
		</code>

		<para>Once the HTTP server binding has been specified in the application configuration, an environment configuration entry for the HTTP server will need to be created, with name <emph>"http.server"</emph> binding. The contents of the HTTP server's environment configuration will depend on the usage requirements and the required web application trees. Please refer to the <ref url="Environment/http.server">http.server</ref> environment configuration documentation for more information.</para>

		<para>During instantiation, the HTTP server will create an HTTP routing web application and a WebSockets routing web application, and will populate them with instances of the web applications specified in the HTTP server's environment configuration.</para>

		<para>Below is an example of environment configuration for an HTTP server configured with file server and email sender HTTP web applications.</para>

		<code lang="Properties">
			http.server {
				info.log     = file:logs/access.log
				error.log    = file:logs/error.log
				server.id    = My server
				worker.count = 8
				listen       = 127.0.0.1:8080

				# Mime types specified in a different file.
				@file:mime.types.hconf

				http {
					files {
						location = /
						root     = file:www
					}

					email.sender {
						location   = /ajax/send
						host       = smtp.example.com
						port       = 465
						user       = email-sender
						subject    = MESSAGE RECEIVED
						from       = enquiry@example.com
						to         = enquiry@example.com
						user-agent = Balau

						# These will be served by the file serving web app.
						success    = /success.html
						failure    = /failure.html

						# These parameters should match the POST request form data.
						parameters {
							Name  = 1
							Email = 2
							Tel   = 3
							Body  = 4
						}
					}
				}
			}
		</code>

		<para>In order to create a binding in the injector for the environment configuration, an <emph>EnvironmentConfiguration</emph> instance for the environment resource(s) will need to be created. In addition to a URI for the environment configuration, the instance should be supplied with a URI specifying the Balau environment specifications. These specifications will be used to provide type information and any default values not provided in the configuration.</para>

		<code lang="C++">
			///////////// Create the application injector. /////////////

			// A file pointing to the environment configuration given above.
			auto env = Resource::File("path/to/env/env.hconf");

			// A file pointing to the environment's credentials configuration.
			// This is required for the email.sender user password.
			auto creds = Resource::File("path/to/env/creds.hconf");

			// A file pointing to the Balau environment specifications.
			auto specs = Resource::File("path/to/specs/balau.thconf");

			// Create the injector configurations.
			auto appConf = AppConfig();
			auto envConf = EnvironmentConfiguration({ env, creds }, { specs });

			// Create the injector.
			auto injector = Injector::create(appConf, envConf);
		</code>

		<h1>Configuration</h1>

		<para>This section discusses the HTTP server configuration in more detail.</para>

		<h2>Main configuration</h2>

		<para>The HTTP server main configuration properties are supplied within a composite <emph>http.server</emph> composite property. This property forms a container of all configuration required by the HTTP server and web applications, with the exception of credentials properties.</para>

		<para>The hierarchical structure of the main configuration also specifies the HTTP and WebSocket web application hierarchies. During instantiation, the HTTP server will instantiate the appropriate web applications, according to the environment configuration.</para>

		<para>The structure of the main configuration takes the form of a set of HTTP value properties, plus a hierarchical set of composite <emph>location</emph> properties. Each <emph>location</emph> property specifies a location, the web application handler, and the web application's configuration.</para>

		<para>The following is an example of a simple HTTP server main configuration that has a file serving web application and an email sending web application.</para>

		<code lang="Properties">
			http.server {
				######### General server properties #########

				logging.ns   = http.server
				info.log     = file:logs/access.log
				error.log    = file:logs/error.log
				server.id    = My server
				worker.count = 8
				listen       = 127.0.0.1:8080

				# Include mime types file.
				@file:mime.types.hconf

				############ HTTP request filters ###########

				filters {
					# TODO
				}

				###### HTTP web application properties ######

				http {
					files {
						location = /
						root     = file:www
					}

					email.sender {
						location   = /ajax/send
						host       = smtp.example.com
						port       = 465
						user       = email-sender
						subject    = MESSAGE RECEIVED
						from       = enquiry@example.com
						to         = enquiry@example.com
						user-agent = Balau

						# These will be served by the file serving web app.
						success    = /success.html
						failure    = /failure.html

						# These parameters should match the POST request form data.
						parameters {
							Name  = 1
							Email = 2
							Tel   = 3
							Body  = 4
						}
					}
				}

				### WebSockets web application properties ###

				ws {
					# TODO
				}
			}
		</code>

		<h2>Credentials management</h2>

		<para>HTTP server web application credentials are supplied in the same hierarchy as the main web application configuration. In order to physically separate confidential credentials from the main environment configuration, a parallel tree may be created that contains only credentials information. The two configuration trees will then be merged together by the injector's environment configuration logic, resulting in a single tree.</para>

		<para>In order to merge the two configuration files, a single <emph>EnvironmentConfiguration</emph> instance should be created.</para>

		<code lang="C++">
			auto env = EnvironmentConfiguration({ env, creds }, { specs });
		</code>
	</chapter>
</document>
