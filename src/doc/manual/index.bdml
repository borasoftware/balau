<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../bdml/BdmlHtml.xsl"?>

<!--
  - Balau core C++ library
  -
  - Copyright (C) 2008 Bora Software (contact@borasoftware.com)
  -
  - Licensed under the Boost Software License - Version 1.0 - August 17th, 2003.
  - See the LICENSE file for the full license text.
  -
  -->

<document xmlns="http://boradoc.org/1.0">
	<metadata>
		<header     url="../common/header.bdml" target="html" />
		<footer     url="../common/footer.bdml" target="html" />
		<stylesheet url="../resources/css/balau.css" target="html" />
		<link       rel="icon" type="image/png" href="../resources/images/BoraLogoC300-OS.png" />
		<copyright>Copyright (C) 2008 Bora Software (contact@borasoftware.com)</copyright>
		<title text="Balau core C++ library" />

		<script src="../bdml/js/Comments.js" type="text/javascript" />
		<script src="../bdml/js/SyntaxHighlighter.js" type="text/javascript" />
		<script src="../bdml/js/CppHighlighterDefinition.js" type="text/javascript" />
		<script src="../bdml/js/VerbatimHighlighterDefinition.js" type="text/javascript" />
		<script src="../bdml/js/MenuHider.js" type="text/javascript" />
	</metadata>

	<chapter title="Balau core C++ library">
		<h1>Overview</h1>

		<para>Balau is a C++ application framework designed for enterprise C++ software development.</para>

		<para>Following the recent revisions of the language, C++ has matured to become an attractive candidate for rapid enterprise application development. Balau provides tools designed to support the rapid development of high performance C++ enterprise applications.</para>

		<para>Balau builds on the foundations of the <ref type="raw" new="true" url="http://www.boost.org">Boost</ref> and <ref type="raw" new="true" url="http://site.icu-project.org">ICU</ref> projects, and focuses on using modern C++17 features and the standard unicode string classes.</para>

		<para>The library has been conceived for the development of applications that have a dependency injection based architecture, have complex logging requirements, and will be developed with a test driven development methodology. Balau has also been designed to provide an application framework for Unicode aware C++ software applications.</para>

		<para>Four key components of the Balau library are the <ref url="Application/Injector">injector</ref>, the <ref url="Application/Environment">environment configuration</ref> framework, the <ref url="Logging/Logger">logging system</ref>, and the <ref url="Testing/TestRunner">test runner</ref>. In this respect, part of Balau is a C++ equivalent to the de facto standard Java based application development components consisting of <emph>Guice</emph>/<emph>Spring</emph> for dependency injection and environment configuration, <emph>Log4j</emph>/<emph>Slf4j</emph>/<emph>Logback</emph> for logging, and <emph>JUnit</emph>/<emph>TestNG</emph> for testing.</para>

		<para>In addition to the injector, environment configuration, logger, and test runner, Balau provides a set of components and utilities with simple APIs, including an HTTP/WebSocket web application framework.</para>

		<h1>Links</h1>

		<para>User manual (this document): <ref type="raw" new="true" url="https://borasoftware.com/doc/balau/latest/manual" />.</para>

		<para>API documentation: <ref type="raw" new="true" url="https://borasoftware.com/doc/balau/latest/api" />.</para>

		<para>Main Git repository: <ref type="raw" new="true" url="https://github.com/borasoftware/balau" />.</para>

		<h1>Intended audience</h1>

		<para>The following questions may be useful in order to determine if the Balau library is suitable for your requirements.</para>

		<bullets>
			<entry>Do you wish to develop an enterprise software application in C++?</entry>

			<entry>Will the code be based on C++17 or a later specification?</entry>

			<entry>Will you be using the Boost libraries?</entry>

			<entry>Do you wish to structure your application via a dependency injection based architecture?</entry>

			<entry>Do you need to configure the application injector differently for multiple environments?</entry>

			<entry>Do you require a flexible logging system?</entry>

			<entry>Does the development team wish to use a type safe, class based, in process / out of process test framework?</entry>

			<entry>Does the development team prefer user friendly canned utilities and utility APIs?</entry>

			<entry>Do you require HTTP/WebSocket connectivity and an integrated web application framework?</entry>

			<entry>Does the development team wish to develop a recursive descent language parser in pure C++?</entry>
		</bullets>

		<h1>Themes</h1>

		<para>The main themes currently covered by the Balau library are as follows. Documentation for each component / utility may be accessed from the drop down menu at the top of this page.</para>

		<bullets>
			<entry>dependency injection with application and environment configuration</entry>

			<entry>Hierarchical, typed environment configuration</entry>

			<entry>Logging system, configured via environment configuration</entry>

			<entry>Test framework</entry>

			<entry>Unified to-string functions</entry>

			<entry>Unified from-string functions</entry>

			<entry>Unicode character and string utilities</entry>

			<entry>Unified resource identification and resource access</entry>

			<entry>Data structures</entry>

			<entry>Shared memory data structures</entry>

			<entry>Concurrent data structures</entry>

			<entry>Hand written language parser utilities</entry>

			<entry>Hierarchical property file format and corresponding hand written parser</entry>

			<entry>HTTP/WebSocket clients and server</entry>

			<entry>HTTP/WebSocket web application framework</entry>

			<entry>Utilities (system, compression, files, hashing, streams, strings, etc.)</entry>
		</bullets>

		<h1>Documentation pages</h1>

		<h2>Developer manual</h2>

		<para>Each documentation page provided in the top menu contains documentation on the component or utility, with the following structure:</para>

		<bullets>
			<entry>overview;</entry>

			<entry>quick start guide;</entry>

			<entry>optional detailed documentation sections for complex components;</entry>

			<entry>an optional design discussion.</entry>
		</bullets>

		<para>Application developers should be able to get up to speed on each component / utility by reading the overview and quick start guide. They can subsequently refer to the detailed documentation later on when more advanced use of the component / utility is required.</para>

		<para>The Balau documentation is written in <ref type="raw" new="true" url="https://borasoftware.com/specifications/bdml.html">BDML</ref>, and can be loaded directly in a web browser with the included BDML XSLT stylesheet*, or translated to HTML via the <emph>BalauManual</emph> make target (<ref type="raw" new="true" url="http://xmlsoft.org/XSLT/xsltproc.html">xsltproc</ref> is required). An HTML translation of the documentation can also be viewed online at <ref type="raw" new="true" url="https://borasoftware.com/doc/balau/latest/manual" />.</para>

		<h2>API documentation</h2>

		<para>API documentation can be generated by running the <emph>BalauApiDoc</emph> make target (<ref type="raw" new="true" url="http://doxygen.org">doxygen</ref> is required). The API documentation can also be viewed online at <ref type="raw" new="true" url="https://borasoftware.com/doc/balau/latest/api" />.</para>

		<h1>Dependencies</h1>

		<para>In addition to the C++17 standard library, Balau relies on two main third party libraries and three utility libraries.</para>

		<para>The first main dependency is <ref type="raw" new="true" url="http://site.icu-project.org">ICU</ref>, which provides Unicode support functions. The second main dependency is the <ref type="raw" new="true" url="http://www.boost.org">Boost library</ref>. Boost is used for low level essential utilities and complex, low level components not found in the C++ standard library.</para>

		<para>The three utility library dependencies are <emph>zlib</emph>, <emph>libzip</emph> and <emph>curl</emph>. The first two utility libraries provide low level compression support for the compression utilities in Balau. The third utility library provides network protocol support in the network classes.</para>

		<para>The only other dependencies used are standard dependencies on each supported platform.</para>

		<para>Balau includes a small number of third party utility libraries in its source code release. As these are contained within the Balau source code tree, they are not external dependencies and thus do not require linkage. These third party libraries are contained within the <emph>ThirdParty</emph> folder. As these libraries are supplied with Balau, application developers can also use them directly if required. The libraries have been namespaced within the <emph>Balau</emph> outer namespace in order to avoid potential clashes.</para>

		<h1>Application structure</h1>

		<para>The high level structure of a software application or library based on Balau is shown in the diagram below.</para>

		<graphic position="center" url="../resources/images/ApplicationStructure.png">
			<target target="html" width="130mm" />
			<target target="pdf" width="100mm" />
		</graphic>

		<h1>License</h1>

		<para>Balau is licensed under the <ref type="raw" new="true" url="https://borasoftware.com/licenses/balau-license.html">Boost Software License Version 1.0</ref>.</para>

		<h1>Supported platforms</h1>

		<h2>C++ version</h2>

		<para>Balau requires a compiler that is compliant with C++17 or a later version of the specification. The compiler must have support for guaranteed copy elision.</para>

		<h2>Operating systems</h2>

		<para>Balau has been developed and tested on 64 bit Linux with the GCC and Clang compilers. A port to Windows 7/10 is planned.</para>

		<para>Other Posix compliant platforms that are supported by Boost and ICU may work if they comply with the primitive type size assertion checks in the <emph>StdTypes.hpp</emph> header:</para>

		<code lang="C++">
			static_assert(CHAR_BIT          == 8);
			static_assert(sizeof(short)     == 2);
			static_assert(sizeof(int)       == 4);
			static_assert(sizeof(long long) == 8);
		</code>

		<para>Due to the size difference between long integers in different common data models, the <emph>long</emph> and <emph>unsigned long</emph> integer types are not used in the library other than when a dependency requires a value of one of those types. Instead, use of the <emph>long long</emph> and <emph>unsigned  long long</emph> integer types allows the commonly accepted data models to be supported without primitive type size conflicts.</para>

		<h2>CPU architectures</h2>

		<para>Balau has been developed and tested on x86-64.</para>

		<para>Concurrent code in the library uses the C++ 11 atomic operations library. Consequently, the library should be free of data races on all platforms that have a standards compliant C++17 compiler and standard library.</para>

		<h1>Building</h1>

		<para>Balau uses the CMake build system. See the <ref url="NonCode/Building">building page</ref> for information on building Balau and its dependencies.</para>

		<para>The source code includes a set of unit tests, implemented with the Balau test runner. After building the library, the tests may be run by launching the <emph>BalauTests</emph> application. The tests can also be used as an aid in getting up to speed quickly with each feature in the library.</para>

		<h1>Contributing</h1>

		<para>The core principal of the Balau core C++ library is to provide a user friendly C++ application framework on top of Boost and ICU, on which complex Unicode based C++ software applications may be created. To achieve this aim, the library contains a set of core application components (injector, environment configuration framework, logger, test runner) that form the basis of a complex C++ software application, and a set of utilities with straightforward APIs.</para>

		<para>The library is in active development. Many of the themes can be expanded to cover a greater breadth of features and utilities.</para>

		<para>Pull requests with additional components and utilities are welcome. Some guidelines are included on the <ref url="NonCode/Contributing">contributing</ref> page. A current list of planned development is available on the <ref url="NonCode/PlannedFeatures">planned features</ref> page.</para>

		<h1>Pending development</h1>

		<para>The following items are currently works in progress.</para>

		<table class="bdml-table30L70">
			<head> <cell>Item</cell> <cell>Work required</cell> </head>

			<body>
				<row>
					<cell>Documentation</cell>
					<cell>Write the WebSocket webapp framework chapter.</cell>
				</row>

				<row>
					<cell>HttpClient/HttpsClient</cell>
					<cell>Extend to use keep-alive connections.</cell>
				</row>

				<row>
					<cell>WsWebApp</cell>
					<cell>Complete design, coding, and unit test.</cell>
				</row>

				<row>
					<cell>Log rotation</cell>
					<cell>Complete design, coding, and unit testing.</cell>
				</row>
			</body>
		</table>

		<para>It is anticipated that these items will be completed by May 2019.</para>

		<section class="notices">
			<para class="notice-body">* Configuration of the browser's security settings may be required. See the documentation on <ref type="raw" new="true" url="https://borasoftware.com/doc/boradoc/latest/manual/direct-loading.html">direct loading</ref> for more information.</para>
		</section>
	</chapter>
</document>
